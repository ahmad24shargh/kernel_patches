diff -Naur a/drivers/input/input.c b/drivers/input/input.c
--- a/drivers/input/input.c	2025-09-14 06:36:22.484850422 +0330
+++ b/drivers/input/input.c	2025-09-14 06:59:02.398319228 +0330
@@ -446,10 +446,20 @@
  * to 'seed' initial state of a switch or initial position of absolute
  * axis, etc.
  */
+#ifdef CONFIG_KSU
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+ 
 void input_event(struct input_dev *dev,
 		 unsigned int type, unsigned int code, int value)
 {
 	unsigned long flags;
+	
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
 
 	if (is_event_supported(type, dev->evbit, EV_MAX)) {
 
diff -Naur a/fs/exec.c b/fs/exec.c
--- a/fs/exec.c	2025-09-14 06:36:22.324850406 +0330
+++ b/fs/exec.c	2025-09-14 06:44:35.438232863 +0330
@@ -2031,12 +2031,21 @@
 	return retval;
 }
 
+#ifdef CONFIG_KSU
+__attribute__((hot))
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr,
+				void *argv, void *envp, int *flags);
+#endif
+
 static int do_execve(struct filename *filename,
 	const char __user *const __user *__argv,
 	const char __user *const __user *__envp)
 {
 	struct user_arg_ptr argv = { .ptr.native = __argv };
 	struct user_arg_ptr envp = { .ptr.native = __envp };
+#ifdef CONFIG_KSU
+	ksu_handle_execveat((int *)AT_FDCWD, &filename, &argv, &envp, 0);
+#endif	
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
@@ -2064,6 +2073,9 @@
 		.is_compat = true,
 		.ptr.compat = __envp,
 	};
+#ifdef CONFIG_KSU // 32-bit ksud and 32-on-64 support
+	ksu_handle_execveat((int *)AT_FDCWD, &filename, &argv, &envp, 0);
+#endif	
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
diff -Naur a/fs/namei.c b/fs/namei.c
--- a/fs/namei.c	2025-09-14 06:36:21.834850357 +0330
+++ b/fs/namei.c	2025-09-14 07:03:53.648348242 +0330
@@ -124,6 +124,10 @@
 
 #define EMBEDDED_NAME_MAX	(PATH_MAX - offsetof(struct filename, iname))
 
+#ifdef CONFIG_KSU
+extern int ksu_getname_flags_kernel(char **kname, int flags);
+#endif
+
 struct filename *
 getname_flags(const char __user *filename, int flags, int *empty)
 {
@@ -200,6 +204,9 @@
 	result->uptr = filename;
 	result->aname = NULL;
 	audit_getname(result);
+#ifdef CONFIG_KSU
+	ksu_getname_flags_kernel((char **)&result->name, flags);
+#endif	
 	return result;
 }
 
diff -Naur a/fs/open.c b/fs/open.c
--- a/fs/open.c	2025-09-14 06:36:22.234850397 +0330
+++ b/fs/open.c	2025-09-14 06:47:09.378248198 +0330
@@ -466,8 +466,17 @@
 	return res;
 }
 
+#ifdef CONFIG_KSU
+__attribute__((hot)) 
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user,
+				int *mode, int *flags);
+#endif
+
 SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 {
+#ifdef CONFIG_KSU
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif	
 	return do_faccessat(dfd, filename, mode, 0);
 }
 
diff -Naur a/fs/read_write.c b/fs/read_write.c
--- a/fs/read_write.c	2025-09-14 06:36:22.004850374 +0330
+++ b/fs/read_write.c	2025-09-14 06:54:59.728295054 +0330
@@ -628,8 +628,18 @@
 	return ret;
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_sys_read(unsigned int fd, char __user **buf_ptr,
+			size_t *count_ptr);
+#endif
+
 SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
 {
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_vfs_read_hook)) 
+		ksu_handle_sys_read(fd, &buf, &count);
+#endif	
 	return ksys_read(fd, buf, count);
 }
 
diff -Naur a/fs/stat.c b/fs/stat.c
--- a/fs/stat.c	2025-09-14 06:36:22.138183721 +0330
+++ b/fs/stat.c	2025-09-14 06:52:34.748280611 +0330
@@ -401,13 +401,22 @@
 	return cp_new_stat(&stat, statbuf);
 }
 
+#ifdef CONFIG_KSU
+__attribute__((hot)) 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user,
+				int *flags);
+#endif
+
 #if !defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_SYS_NEWFSTATAT)
 SYSCALL_DEFINE4(newfstatat, int, dfd, const char __user *, filename,
 		struct stat __user *, statbuf, int, flag)
 {
 	struct kstat stat;
 	int error;
-
+	
+#ifdef CONFIG_KSU
+	ksu_handle_stat(&dfd, &filename, &flag);
+#endif
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
 		return error;
@@ -559,6 +568,9 @@
 	struct kstat stat;
 	int error;
 
+#ifdef CONFIG_KSU // 32-bit su
+	ksu_handle_stat(&dfd, &filename, &flag); 
+#endif	
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
 		return error;
